Документация API платформы Freelance Marketplace

Общее описание проекта
Freelance Marketplace — веб-платформа, соединяющая заказчиков, публикующих задачи, с фрилансерами, подающими заявки на их выполнение. Заказчики создают задачи, просматривают заявки, принимают или отклоняют их, управляют статусами задач. Фрилансеры просматривают открытые задачи, подают заявки и работают над принятыми задачами. API построен на FastAPI, использует PostgreSQL с SQLAlchemy и JWT для аутентификации.

Требования к работе с API
- Базовый URL: http://localhost:8000 (замените на актуальный в продакшене).
- Формат данных: application/json, если не указано иное.
- Аутентификация: Защищённые маршруты требуют JWT-токен в заголовке Authorization: Bearer <token>. Токен получается через POST /auth/login или POST /auth/token. Refresh token хранится в HTTP-only cookie и используется через POST /auth/refresh. Включайте credentials: "include" в запросах для отправки cookies.
- Обработка ошибок: Ошибки возвращаются как {"detail": "описание ошибки"} с соответствующим HTTP-кодом.
- База данных: PostgreSQL с миграциями через Alembic.
- Типы пользователей:
  - customer: Заказчики, создают и управляют задачами, принимают/отклоняют заявки.
  - freelancer: Фрилансеры, просматривают открытые задачи и подают заявки.

Маршруты

Модуль: Аутентификация (Auth)
Обрабатывает регистрацию, вход, выход и информацию о пользователе.

POST /auth/register
Назначение: Регистрация нового пользователя (заказчика или фрилансера).
Аутентификация: Не требуется.
Входные данные:
- Тело запроса (JSON):
  {
    "username": "строка", // Уникальное имя (буквы, цифры, подчёркивания, 3-50 символов)
    "first_name": "строка", // Имя (обязательно)
    "last_name": "строка", // Фамилия (обязательно)
    "patronymic": "строка|null", // Отчество (необязательно)
    "email": "строка", // Уникальный email
    "password": "строка", // Пароль (минимум 8 символов)
    "password_confirm": "строка", // Подтверждение пароля (должно совпадать)
    "user_type": "customer|freelancer" // Тип пользователя
  }
Логика работы:
- Проверяет совпадение password и password_confirm.
- Проверяет, что username и email не заняты.
- Хеширует пароль с помощью bcrypt.
- Создаёт запись в таблице users с указанным user_type.
- Возвращает данные созданного пользователя.
Ответы:
- 201 Created:
  {
    "id": 1,
    "username": "artem",
    "first_name": "Артём",
    "last_name": "Сидоров",
    "patronymic": null,
    "email": "artem@example.com",
    "user_type": "freelancer",
    "profile": null,
    "skills": [],
    "completed_tasks_count": 0
  }
- 400 Bad Request:
  {"detail": "Пароли не совпадают"}
  {"detail": "Имя пользователя уже занято"}
  {"detail": "Электронная почта уже зарегистрирована"}
  {"detail": "Недопустимый тип пользователя: invalid"}
- 500 Internal Server Error:
  {"detail": "Ошибка при регистрации пользователя"}

POST /auth/login
Назначение: Аутентификация пользователя и получение JWT-токена.
Аутентификация: Не требуется.
Входные данные:
- Тело запроса (JSON):
  {
    "username": "строка|null", // Имя пользователя (или null, если используется email)
    "email": "строка|null", // Email (или null, если используется username)
    "password": "строка" // Пароль
  }
- Должен быть указан либо username, либо email.
Логика работы:
- Находит пользователя по username или email.
- Проверяет пароль с помощью bcrypt.
- Генерирует access token (действует 30 минут) и refresh token (действует 7 дней).
- Устанавливает refresh token в HTTP-only cookie (credentials: "include" требуется).
- Возвращает access token.
Ответы:
- 200 OK:
  {
    "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "token_type": "bearer"
  }
- 400 Bad Request:
  {"detail": "Необходимо указать email или username"}
- 401 Unauthorized:
  {"detail": "Неверный email, username или пароль"}

POST /auth/token
Назначение: Аутентификация через форму (совместимость с OAuth2).
Аутентификация: Не требуется.
Входные данные:
- Данные формы:
  - username: Может быть username или email.
  - password: Пароль.
Логика работы:
- Определяет, является ли username email (содержит @) или именем пользователя.
- Находит пользователя и проверяет пароль.
- Генерирует access token (действует 30 минут) и refresh token (действует 7 дней).
- Устанавливает refresh token в HTTP-only cookie (credentials: "include" требуется).
- Возвращает access token.
Ответы:
- 200 OK:
  {
    "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "token_type": "bearer"
  }
- 401 Unauthorized:
  {"detail": "Неверный email, username или пароль"}

POST /auth/refresh
Назначение: Обновление access token с использованием refresh token.
Аутентификация: Требуется refresh token в HTTP-only cookie.
Входные данные: Нет (refresh token извлекается из cookie).
Логика работы:
- Извлекает refresh token из cookie (требуется credentials: "include").
- Проверяет валидность refresh token.
- Генерирует новый access token (действует 30 минут) и новый refresh token (действует 7 дней).
- Обновляет refresh token в cookie.
- Возвращает новый access token.
Ответы:
- 200 OK:
  {
    "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "token_type": "bearer"
  }
- 401 Unauthorized:
  {"detail": "Refresh token не предоставлен"}
  {"detail": "Недействительный refresh token"}
  {"detail": "Пользователь не найден"}

POST /auth/logout
Назначение: Выход пользователя, отзыв токена и очистка refresh token.
Аутентификация: Требуется (Bearer-токен).
Входные данные: Нет (токен извлекается из заголовка Authorization).
Логика работы:
- Добавляет access token в таблицу blacklisted_tokens.
- Очищает HTTP-only cookie с refresh token.
- Последующие запросы с этим токеном будут отклонены.
Ответы:
- 200 OK:
  {"message": "Выход выполнен успешно, токен отозван"}
- 401 Unauthorized:
  {"detail": "Не удалось проверить учетные данные"}
  {"detail": "Токен был отозван"}

GET /auth/me
Назначение: Получение информации о текущем аутентифицированном пользователе.
Аутентификация: Требуется (Bearer-токен).
Входные данные: Нет.
Логика работы:
- Извлекает пользователя из access token через зависимость get_current_user.
- Возвращает данные пользователя, включая профиль, навыки и количество завершённых задач.
Ответы:
- 200 OK:
  {
    "id": 1,
    "username": "artem",
    "first_name": "Артём",
    "last_name": "Сидоров",
    "patronymic": null,
    "email": "artem@example.com",
    "user_type": "freelancer",
    "profile": null,
    "skills": [],
    "completed_tasks_count": 0
  }
- 401 Unauthorized:
  {"detail": "Не удалось проверить учетные данные"}
  {"detail": "Токен был отозван"}

Модуль: Задачи (Tasks)
Обрабатывает создание, управление задачами и работу с заявками.

POST /tasks/create
Назначение: Создание новой задачи (только для заказчиков).
Аутентификация: Требуется (Bearer-токен, user_type=customer).
Входные данные:
- Тело запроса (JSON):
  {
    "title": "строка", // Название задачи (обязательно)
    "description": "строка", // Описание задачи (обязательно)
    "budget_min": число|null, // Минимальный бюджет (необязательно)
    "budget_max": число|null, // Максимальный бюджет (необязательно)
    "deadline": "строка|null", // Дата в формате ISO 8601 (например, "2025-06-01T00:00:00")
    "category": "Разработка|Дизайн|Программирование|Копирайтинг|Другое", // Категория
    "custom_category": "строка|null", // Обязательно, если category="Другое"
    "skill_level": "Базовый|Средний|Продвинутый" // Уровень навыков
  }
Логика работы:
- Проверяет, что пользователь — заказчик.
- Проверяет, что budget_min <= budget_max (если оба указаны).
- Требует custom_category, если category="Другое".
- Создаёт задачу в таблице tasks со статусом Открытая и owner_id текущего пользователя.
Ответы:
- 201 Created:
  {
    "id": 1,
    "title": "Создать веб-сайт",
    "description": "Нужно разработать сайт на FastAPI",
    "budget_min": 1000.0,
    "budget_max": 2000.0,
    "deadline": "2025-06-01T00:00:00",
    "category": "Программирование",
    "custom_category": null,
    "skill_level": "Средний",
    "status": "Открытая",
    "owner_id": 1,
    "freelancer_id": null
  }
- 400 Bad Request:
  {"detail": "Минимальный бюджет не может быть больше максимального"}
  {"detail": "Необходимо указать 'custom_category' при категории 'Другое'"}
  {"detail": "Некорректное значение категории: invalid"}
  {"detail": "Некорректный уровень навыка: invalid"}
- 403 Forbidden:
  {"detail": "Только заказчики могут создавать задачи"}
- 401 Unauthorized:
  {"detail": "Не удалось проверить учетные данные"}

GET /tasks/
Назначение: Получение списка всех задач, созданных текущим заказчиком.
Аутентификация: Требуется (Bearer-токен, user_type=customer).
Входные данные: Нет.
Логика работы:
- Возвращает список задач, где owner_id совпадает с ID текущего пользователя.
Ответы:
- 200 OK:
  [
    {
      "id": 1,
      "title": "Создать веб-сайт",
      "description": "Нужно разработать сайт на FastAPI",
      "budget_min": 1000.0,
      "budget_max": 2000.0,
      "deadline": "2025-06-01T00:00:00",
      "category": "Программирование",
      "custom_category": null,
      "skill_level": "Средний",
      "status": "Открытая",
      "owner_id": 1,
      "freelancer_id": null
    }
  ]
- 403 Forbidden:
  {"detail": "Только заказчики могут просматривать свои задачи"}
- 401 Unauthorized:
  {"detail": "Не удалось проверить учетные данные"}

GET /tasks/public
Назначение: Получение списка открытых задач, доступных фрилансерам, с фильтрацией и пагинацией.
Аутентификация: Требуется (Bearer-токен, user_type=freelancer).
Входные данные:
- Query-параметры:
  - category: Необязательно, одно из: Разработка|Дизайн|Программирование|Копирайтинг|Другое.
  - skill_level: Необязательно, одно из: Базовый|Средний|Продвинутый.
  - skip: Целое число, по умолчанию 0 (сколько записей пропустить).
  - limit: Целое число, по умолчанию 10, максимум 100 (сколько записей вернуть).
Логика работы:
- Возвращает задачи со статусом Открытая.
- Фильтрует по category и skill_level, если указаны.
- Применяет пагинацию с помощью skip и limit.
Ответы:
- 200 OK:
  [
    {
      "id": 1,
      "title": "Создать веб-сайт",
      "description": "Нужно разработать сайт на FastAPI",
      "budget_min": 1000.0,
      "budget_max": 2000.0,
      "deadline": "2025-06-01T00:00:00",
      "category": "Программирование",
      "custom_category": null,
      "skill_level": "Средний",
      "status": "Открытая",
      "owner_id": 1,
      "freelancer_id": null
    }
  ]
- 403 Forbidden:
  {"detail": "Только фрилансеры могут просматривать публичные задачи"}
- 401 Unauthorized:
  {"detail": "Не удалось проверить учетные данные"}

GET /tasks/{task_id}
Назначение: Получение информации о задаче по ID (для заказчиков).
Аутентификация: Требуется (Bearer-токен, user_type=customer).
Входные данные:
- Параметр пути:
  - task_id: ID задачи.
Логика работы:
- Возвращает задачу, если её owner_id совпадает с ID текущего пользователя.
Ответы:
- 200 OK:
  {
    "id": 1,
    "title": "Создать веб-сайт",
    "description": "Нужно разработать сайт на FastAPI",
    "budget_min": 1000.0,
    "budget_max": 2000.0,
    "deadline": "2025-06-01T00:00:00",
    "category": "Программирование",
    "custom_category": null,
    "skill_level": "Средний",
    "status": "Открытая",
    "owner_id": 1,
    "freelancer_id": null
  }
- 403 Forbidden:
  {"detail": "Только заказчики могут просматривать свои задачи"}
- 404 Not Found:
  {"detail": "Задача не найдена"}
- 401 Unauthorized:
  {"detail": "Не удалось проверить учетные данные"}

GET /tasks/{task_id}/public
Назначение: Получение информации об открытой задаче по ID (для фрилансеров).
Аутентификация: Требуется (Bearer-токен, user_type=freelancer).
Входные данные:
- Параметр пути:
  - task_id: ID задачи.
Логика работы:
- Возвращает задачу, если её статус Открытая.
Ответы:
- 200 OK:
  {
    "id": 1,
    "title": "Создать веб-сайт",
    "description": "Нужно разработать сайт на FastAPI",
    "budget_min": 1000.0,
    "budget_max": 2000.0,
    "deadline": "2025-06-01T00:00:00",
    "category": "Программирование",
    "custom_category": null,
    "skill_level": "Средний",
    "status": "Открытая",
    "owner_id": 1,
    "freelancer_id": null
  }
- 403 Forbidden:
  {"detail": "Только фрилансеры могут просматривать публичные задачи"}
- 404 Not Found:
  {"detail": "Открытая задача не найдена"}
- 401 Unauthorized:
  {"detail": "Не удалось проверить учетные данные"}

POST /tasks/{task_id}/apply
Назначение: Подача заявки на задачу (для фрилансеров).
Аутентификация: Требуется (Bearer-токен, user_type=freelancer).
Входные данные:
- Параметр пути:
  - task_id: ID задачи.
- Тело запроса (JSON):
  {
    "comment": "строка|null", // Комментарий к заявке (необязательно)
    "proposed_price": число|null, // Предлагаемая цена (необязательно)
    "proposed_deadline": "строка|null" // Предлагаемый срок в формате ISO 8601
  }
Логика работы:
- Проверяет, что пользователь — фрилансер и задача открыта.
- Проверяет, что фрилансер ещё не подавал заявку на эту задачу.
- Создаёт запись в таблице applications со статусом На рассмотрении.
Ответы:
- 201 Created:
  {
    "id": 1,
    "task_id": 1,
    "freelancer_id": 2,
    "comment": "Готов выполнить за 10 дней",
    "proposed_price": 1500.0,
    "proposed_deadline": "2025-05-20T00:00:00",
    "status": "На рассмотрении"
  }
- 400 Bad Request:
  {"detail": "Вы уже подали заявку на эту задачу"}
- 403 Forbidden:
  {"detail": "Только фрилансеры могут подавать заявки на задачи"}
- 404 Not Found:
  {"detail": "Открытая задача не найдена"}
- 401 Unauthorized:
  {"detail": "Не удалось проверить учетные данные"}

GET /tasks/{task_id}/applications
Назначение: Получение списка заявок на задачу (для заказчиков).
Аутентификация: Требуется (Bearer-токен, user_type=customer).
Входные данные:
- Параметр пути:
  - task_id: ID задачи.
Логика работы:
- Проверяет, что пользователь — заказчик и владелец задачи.
- Возвращает все заявки из таблицы applications для указанной задачи.
Ответы:
- 200 OK:
  [
    {
      "id": 1,
      "task_id": 1,
      "freelancer_id": 2,
      "comment": "Готов выполнить за 10 дней",
      "proposed_price": 1500.0,
      "proposed_deadline": "2025-05-20T00:00:00",
      "status": "На рассмотрении"
    }
  ]
- 403 Forbidden:
  {"detail": "Только заказчики могут просматривать заявки на свои задачи"}
- 404 Not Found:
  {"detail": "Задача не найдена"}
- 401 Unauthorized:
  {"detail": "Не удалось проверить учетные данные"}

POST /tasks/{task_id}/applications/{application_id}/accept
Назначение: Принятие заявки на задачу (для заказчиков).
Аутентификация: Требуется (Bearer-токен, user_type=customer).
Входные данные:
- Параметры пути:
  - task_id: ID задачи.
  - application_id: ID заявки.
Логика работы:
- Проверяет, что пользователь — заказчик и владелец задачи.
- Проверяет, что задача открыта и заявка в статусе На рассмотрении.
- Устанавливает задаче статус В процессе и freelancer_id из заявки.
- Меняет статус заявки на Принята.
- Отклоняет все остальные заявки на эту задачу.
Ответы:
- 200 OK:
  {
    "id": 1,
    "title": "Создать веб-сайт",
    "description": "Нужно разработать сайт на FastAPI",
    "budget_min": 1000.0,
    "budget_max": 2000.0,
    "deadline": "2025-06-01T00:00:00",
    "category": "Программирование",
    "custom_category": null,
    "skill_level": "Средний",
    "status": "В процессе",
    "owner_id": 1,
    "freelancer_id": 2
  }
- 400 Bad Request:
  {"detail": "Задача уже в процессе или закрыта"}
  {"detail": "Заявка уже обработана"}
- 403 Forbidden:
  {"detail": "Только заказчики могут принимать заявки"}
- 404 Not Found:
  {"detail": "Задача не найдена"}
  {"detail": "Заявка не найдена"}
- 401 Unauthorized:
  {"detail": "Не удалось проверить учетные данные"}

POST /tasks/{task_id}/applications/{application_id}/reject
Назначение: Отклонение заявки на задачу (для заказчиков).
Аутентификация: Требуется (Bearer-токен, user_type=customer).
Входные данные:
- Параметры пути:
  - task_id: ID задачи.
  - application_id: ID заявки.
Логика работы:
- Проверяет, что пользователь — заказчик и владелец задачи.
- Проверяет, что заявка в статусе На рассмотрении.
- Меняет статус заявки на Отклонена.
Ответы:
- 200 OK:
  {
    "id": 1,
    "task_id": 1,
    "freelancer_id": 2,
    "comment": "Готов выполнить за 10 дней",
    "proposed_price": 1500.0,
    "proposed_deadline": "2025-05-20T00:00:00",
    "status": "Отклонена"
  }
- 400 Bad Request:
  {"detail": "Заявка уже обработана"}
- 403 Forbidden:
  {"detail": "Только заказчики могут отклонять заявки"}
- 404 Not Found:
  {"detail": "Задача не найдена"}
  {"detail": "Заявка не найдена"}
- 401 Unauthorized:
  {"detail": "Не удалось проверить учетные данные"}

PUT /tasks/{task_id}/update
Назначение: Обновление задачи (для заказчиков).
Аутентификация: Требуется (Bearer-токен, user_type=customer).
Входные данные:
- Параметр пути:
  - task_id: ID задачи.
- Тело запроса (JSON):
  {
    "title": "строка|null", // Название (необязательно)
    "description": "строка|null", // Описание (необязательно)
    "budget_min": число|null, // Минимальный бюджет (необязательно)
    "budget_max": число|null, // Максимальный бюджет (необязательно)
    "deadline": "строка|null", // Дата в формате ISO 8601 (необязательно)
    "category": "Разработка|Дизайн|Программирование|Копирайтинг|Другое|null", // Категория (необязательно)
    "custom_category": "строка|null", // Обязательно, если category="Другое"
    "skill_level": "Базовый|Средний|Продвинутый|null", // Уровень навыков (необязательно)
    "status": "Открытая|В процессе|Закрытая|null" // Статус (необязательно)
  }
Логика работы:
- Проверяет, что пользователь — заказчик и владелец задачи.
- Проверяет, что budget_min <= budget_max (если оба указаны).
- Требует custom_category, если category="Другое".
- Обновляет только переданные поля задачи.
Ответы:
- 200 OK:
  {
    "id": 1,
    "title": "Создать веб-сайт",
    "description": "Обновлённое описание",
    "budget_min": 1000.0,
    "budget_max": 2000.0,
    "deadline": "2025-06-01T00:00:00",
    "category": "Программирование",
    "custom_category": null,
    "skill_level": "Средний",
    "status": "Открытая",
    "owner_id": 1,
    "freelancer_id": null
  }
- 400 Bad Request:
  {"detail": "Минимальный бюджет не может быть больше максимального"}
  {"detail": "Необходимо указать 'custom_category' при категории 'Другое'"}
  {"detail": "Некорректное значение категории: invalid"}
  {"detail": "Некорректный уровень навыка: invalid"}
  {"detail": "Некорректный статус: invalid"}
- 403 Forbidden:
  {"detail": "Только заказчики могут изменять задачи"}
- 404 Not Found:
  {"detail": "Задача не найдена"}
- 401 Unauthorized:
  {"detail": "Не удалось проверить учетные данные"}

POST /tasks/{task_id}/close
Назначение: Закрытие задачи (для заказчиков).
Аутентификация: Требуется (Bearer-токен, user_type=customer).
Входные данные:
- Параметр пути:
  - task_id: ID задачи.
Логика работы:
- Проверяет, что пользователь — заказчик и владелец задачи.
- Меняет статус задачи на Закрытая.
Ответы:
- 200 OK:
  {
    "id": 1,
    "title": "Создать веб-сайт",
    "description": "Нужно разработать сайт на FastAPI",
    "budget_min": 1000.0,
    "budget_max": 2000.0,
    "deadline": "2025-06-01T00:00:00",
    "category": "Программирование",
    "custom_category": null,
    "skill_level": "Средний",
    "status": "Закрытая",
    "owner_id": 1,
    "freelancer_id": 2
  }
- 403 Forbidden:
  {"detail": "Только заказчики могут закрывать задачи"}
- 404 Not Found:
  {"detail": "Задача не найдена"}
- 401 Unauthorized:
  {"detail": "Не удалось проверить учетные данные"}

DELETE /tasks/{task_id}
Назначение: Удаление задачи (для заказчиков).
Аутентификация: Требуется (Bearer-токен, user_type=customer).
Входные данные:
- Параметр пути:
  - task_id: ID задачи.
Логика работы:
- Проверяет, что пользователь — заказчик и владелец задачи.
- Удаляет задачу из таблицы tasks.
Ответы:
- 204 No Content:
  Пустой ответ (успешное удаление).
- 403 Forbidden:
  {"detail": "Только заказчики могут удалять задачи"}
- 404 Not Found:
  {"detail": "Задача не найдена"}
- 401 Unauthorized:
  {"detail": "Не удалось проверить учетные данные"}